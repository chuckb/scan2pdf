#!/usr/bin/env ruby
# -*- mode: ruby; coding: utf-8 -*-
#
# scan2pdf -- scan documents and convert to PDF
# Copyright © 2011 Diego E. "Flameeyes" Pettenò <flameeyes@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

require 'optparse'
require 'tempfile'
require 'fileutils'

begin
  gem 'posix-spawn', '>=0.3.7'
  require 'posix/spawn'
  include POSIX::Spawn
rescue Gem::LoadError
  gem 'posix-spawn'
  require 'posix/spawn'
  include POSIX::Spawn

  class << self
    alias_method :pspawn_system, :system

    def system(*args)
      options =
        if args[-1].respond_to?(:to_hash)
          args.pop.to_hash
        else
          {}
        end

      pspawn_system(*([ args[0] ] + (args[1..-1].flatten.collect { |arg| arg.to_s }) + [options]))
    end
  end
end

ORIGINAL_PWD=Dir.pwd

MODES = ['gray', 'color', 'lineart']
MODES_ALIASES = {
  'grey' => 'gray',
  'colour' => 'color',
  'binary' => 'lineart',
}

RESOLUTIONS = [ 150, 200, 300, 400, 600, 1200, 1600 ]

RESOLUTION_ALIASES = {
  'document' => 200,
  'print' => 300,
  'fine' => 600
}

SIZE_ALIASES = {
  'a4' => '210x296.926', # some scanners are slightly smaller :(
  'a5-landscape' => '210x148',
  'a5' => '148x210',
  'letter' => '215.9x279.4',
}

DUPLEX = ['auto', 'manual', 'best']
LAYOUT = ['single', 'double', 'double-folded']

options_set = {
  :output => ["-o", "--output FILE", "Save output to file"],
  :directory => ["-O", "--output-directory", "Save output to single-page files to a directory"],
  :pages => ["-p", "--pages NUMBER", OptionParser::DecimalInteger, "Scan NUMBER pages per document"],
  :documents => ["-n", "--documents NUMBER", OptionParser::DecimalInteger, "Scan NUMBER documents"],
  :resolution => ["-r", "--resolution DPI", RESOLUTIONS, RESOLUTION_ALIASES, "Scan at [DPI] dots per inch"],
  :mode => ["-m", "--mode MODE", MODES, MODES_ALIASES, "Select scan mode"],
  :size_name => ["-s", "--size-name SIZE", SIZE_ALIASES, "Area to scan (format name)"],
  :size => ["-S", "--size SIZE", "Area to scan (in mm)"],
  :rotate => ["-R", "--rotate DEGREES", OptionParser::DecimalInteger, "Rotate the scan by DEGREES"],
  :force => ["-f", "--force", "Force overwriting destination"],
  :adf => ["-A", "--adf", "Use the Auto Document Feeder"],
  :duplex => ["-D", "--duplex [auto|manual|best]", DUPLEX, "Scan both sides of pages"],
  :blank => ["-b", "--blank", "Ignore the final blank page of the document"],
  :continuous => ["-C", "--continuous", "Scan countinuously until interrupted"],
  :fax => ["-F", "--fax", "Produce PDF ready for faxing (G3 encoding)"],
  :unpaper => ["-U", "--no-run-unpaper", "Execute unpaper on the scanned images"],
  :device => ["-d", "--device DEVICE", "Scan from the given device"],
  :center => ["-c", "--center-scan", "Apply offset, align scanned document with center"],
  :voffset => ["-V", "--vertical-offset NUMBER", OptionParser::DecimalInteger, "Vertical offset (in mm)"],
  :fold => ["-l", "--folded", "Scan a folded document (1-4, pause, 2-3)"],
  :layout => ["-L", "--layout LAYOUT", LAYOUT, "Select scan layout (single or double)"],
}

options = {
  :rotate => 0,
  :pages => -1,
  :documents => 1,
  :mode => 'lineart',
  :unpaper => true,
  :size_name => '210x296.926',
  :resolution => 300,
  :layout => 'single',
}

OptionParser.new do |opts|
  opts.banner = "Usage: scan2pdf.rb [options]"

  options_set.each_pair do |key, params|
    opts.on(*params) do |arg|
      options[key] = arg
    end
  end
end.parse!

def puterror(exit_val, msg)
  $stderr.puts "#{File.basename($0)}: #{msg}"
  exit exit_val
end

if options[:pages] <= 0 and options[:documents] <= 0
  puterror 12, "can't have unbound documents with unbound pages"
end

if options[:pages] % 2 != 0
  if options[:blank]
    puterror 13, "can't remove final blank page on odd-paged documents"
  end

  if options[:pages] != -1 && options.has_key?(:duplex)
    puterror 13, "can't use duplex scan on odd-paged documents; use -b if you need to."
  end
end

options[:output] ||= sprintf("scan2pdf-%08x.pdf",
                             rand(0x100000000))

if File.exists?( options[:output] ) and not options[:force]
  puterror 2, "file exists"
end

if options[:documents] != 1
  options[:output] = "#{Dir::pwd}/#{options[:output].sub(/\.pdf$/, '')}-%03d.pdf"
elsif options[:directory]
  Dir::mkdir("#{Dir::pwd}/#{options[:output]}")
  options[:output] = "#{Dir::pwd}/#{options[:output]}/%03d.pdf"
else
  options[:output] = "#{Dir::pwd}/#{options[:output]}"
end

# if the user didn't choose a device already, ask sane which ones are
# available and take the first one in the list.
options[:device] ||= `scanimage --formatted-device-list='%d '`.split()[0]

# make sure that if the user only provided --duplex, it gets seen as
# --duplex=best
options[:duplex] ||= "best" if options.has_key? :duplex

scanimage_params = [
                    "--buffer-size=1024",
                    "--format=pnm",
                    "--batch=raw%03d",
                    "--device-name=#{options[:device]}",
                    "--resolution=#{options[:resolution]}",
                    ]
unpaper_params = [
                  "--dpi", options[:resolution],
                  "--no-mask-center", "--no-border-align",
                  "--no-mask-scan"
                 ]
pnmtotiff_params = [
                    "-xresolution", options[:resolution],
                    "-yresolution", options[:resolution],
                   ]
tiff2pdf_params = []

unpaper_params << "--no-processing" unless options[:unpaper]

# unpaper uses lots of memory during the deskewing qpixel conversion process
# disable this behavior on memory constrained systems
unpaper_params << "--no-qpixels" unless `free -o -t | grep Total`.split[1].to_i > 512000

# scanimage changed how custom options are presented in version 1.0.22
# added support here to handle this difference
si_options_switch = "--help"
si_version = /(\d+)\.(\d+)\.(\d+)/.match(`scanimage --version`)
si_options_switch = "-A" if si_version[1].to_i >= 1 && si_version[2].to_i >= 0 && si_version[3].to_i >= 22

scanimage_available_options = {}
si_opts_re = /^\s+(--[\w-]+|-[a-z])(\s+|\[=\()([\w .|]+)(\)\])?\s+\[([\w .]+)\]$/
`scanimage -d '#{options[:device]}' #{si_options_switch}`.split("\n").each do |line|
  if res = si_opts_re.match(line)
    next if res[5] == "inactive"
    scanimage_available_options[res[1]] = res[3].split("|")
  end
end

scanimage_params << "--compression=None" if scanimage_available_options.has_key?("--compression")

if options[:adf]
  if scanimage_available_options.has_key?("--source")
    if scanimage_available_options["--source"].include?("ADF")
      scanimage_params << "--source=ADF"
    else
      puterror 3, "device does not support ADF"
    end
  end

  if scanimage_available_options.has_key?("--adf-auto-scan")
    scanimage_params << "--adf-auto-scan=yes"
  end

  if scanimage_available_options.has_key?("--adf-mode")
    if options[:duplex] == "auto" or options[:duplex] == "best"
      options[:duplex] = "auto"
      scanimage_params << "--adf-mode=Duplex"
    else
      scanimage_params << "--adf-mode=Simplex"
    end
  else
    if options[:duplex] == "auto"
      puterror 4, "device does not support automatic duplex"
    end

    options[:duplex] = "manual" if options[:duplex]
  end
else
  scanimage_params << "--batch-prompt"
end

available_modes = scanimage_available_options["--mode"].collect { |x| x.downcase }
case options[:mode]
when /lineart/i
  tiff2pdf_params << "-z"
  if available_modes.include?("lineart")
    scanimage_params << "--mode=lineart"
  elsif available_modes.include?("binary")
    scanimage_params << "--mode=binary"
  else
    puterror 5, "device does not support selected mode"
  end
when /gray/i
  tiff2pdf_params << "-j"

  if available_modes.include?("gray")
    scanimage_params << "--mode=gray"
  else
    puterror 5, "device does not support selected mode"
  end

  unpaper_params << "--no-wipe"
when /color/i
  tiff2pdf_params << "-j"

  if available_modes.include?("color")
    scanimage_params << "--mode=color"
  else
    puterror 5, "device does not support selected mode"
  end

  unpaper_params << "--no-wipe"
end

if scanimage_available_options["-x"][0] == "auto"
  max_scan_sizes_index = 1
else
  max_scan_sizes_index = 0
end

scanimage_available_options["-x"][max_scan_sizes_index] =~ /0\.\.([0-9.]+)mm/
max_scan_width = $1.to_f
scanimage_available_options["-y"][max_scan_sizes_index] =~ /0\.\.([0-9.]+)mm/
max_scan_height = $1.to_f

options[:size] ||= options[:size_name]

if not options[:size] =~ /([0-9]+(\.[0-9]+)?)x([0-9]+(\.[0-9]+)?)/
  puterror 6, "invalid size requested"
end

case options[:layout]
when 'single'
  scan_width = $1.to_f
  scan_height = $3.to_f

  unpaper_params << "--layout" << "single"
  unpaper_params << "--size" << "#{scan_width.to_i}mm,#{scan_height.to_i}mm"
when 'double', 'double-folded'
  page_width = $1.to_f
  page_height = $3.to_f

  scan_width = page_height
  scan_height = page_width * 2

  unpaper_params << "--layout" << "double"
  unpaper_params << "--output-pages" << "2"
  unpaper_params << "--size" << "#{scan_height.to_i}mm,#{scan_width.to_i}mm"
else
  puterror 8, "invalid --layout value: #{options[:layout]}"
end

if scan_width > max_scan_width or scan_height > max_scan_height
  puterror 9, "size outside of maximum scan area (#{scan_width}x#{scan_height} vs #{max_scan_width}x#{max_scan_height})"
end

scanimage_params << "-x #{scan_width}" << "-y #{scan_height}"

if options[:center]
  offset = (max_scan_width - scan_width)/2
  scanimage_params << "-l #{offset}" if offset > 0
end

scanimage_params << "-t #{options[:voffset]}" if options[:voffset]

tmpdir = sprintf("%s/scan2pdf-%08x",
                 Dir::tmpdir,
                 rand(0x100000000))
Dir.mkdir(tmpdir)

at_exit do
  FileUtils.rm_r(tmpdir)
end

Dir.chdir(tmpdir)

def last_scanned_page
  Dir["raw*"].sort()[-1] =~ /(.*\/)?raw([0-9]{3})/
  return $2.to_i
end

def pause
  $stdout.puts "Press ENTER to continue."
  $stdin.gets
end

if options[:duplex] == "manual"
  if options[:pages]
    even_pages = (options[:pages]*options[:documents])/2
    odd_pages = (options[:pages]*options[:documents])-even_pages
  else
    odd_pages = -1
  end

  puts "Scanning odd side"
  result = system("scanimage", "--batch-increment=2", "--batch-start=1",
                  "--batch-count=#{odd_pages}", scanimage_params)
  if not result and options[:pages] != -1
    puterror 10, "scanimage failed"
  end

  puts "Press Enter to scan even side"
  gets

  even_pages ||= (last_scanned_page()+1)/2

  if not system("scanimage", "--batch-increment=-2", "--batch-start=#{last_scanned_page()+1}",
                "--batch-start=#{even_pages*2}", "--batch-count=#{even_pages}", scanimage_params)
    puterror 10, "scanimage failed"
  end
elsif options[:fold]
  if options[:pages] % 4 != 0
    puterror 11, "Folded scan only works in four pages increments"
  end

  sheets = (options[:pages] / 4) * options[:documents]
  sheets.times do |i|
    system("scanimage", "--batch-start=#{i*4+1}", "--batch-increment=3", "--batch-count=2",
           *scanimage_params)
    pause
    system("scanimage", "--batch-start=#{i*4+2}", "--batch-increment=1", "--batch-count=2",
           *scanimage_params)
    pause
  end
else
  scanpages = options[:pages] * options[:documents]

  result = system("scanimage", "--batch-start=1", "--batch-count=#{scanpages}",
                  *scanimage_params)
  if not result and scanpages >= 1
    puterror 10, "scanimage failed"
  end
end

if options[:pages] <= 0
  options[:pages] = last_scanned_page
elsif options[:documents] <= 0
  options[:documents] = last_scanned_page/options[:pages]
elsif options[:directory] and options[:documents] == 1
  options[:documents] = options[:pages]
  options[:pages] = 1
end

if options[:documents] and options[:blank]
  FileUtils.rm(options[:documents].times.collect { |x| "raw%03d" % ((x+1)*options[:pages]) })
end

scanned_pages = Dir["raw*"]

rotation = options[:rotate].to_i % 360
double_layout = (options[:layout] =~ /^double(-folded)?/) != nil

scanned_pages.each do |page|
  Process.fork do
    at_exit { exit! }

    page = page.sub('raw', '')
    step = "raw"

    if rotation != 0
      system("convert", "#{step}#{page}", "-rotate", rotation, "rotated#{page}")
      step = "rotated"
    end

    my_unpaper_params = unpaper_params.dup

    if double_layout
      case page.to_i % 2
      when 1
        my_unpaper_params << "--pre-rotate" << "90"
      when 0
        my_unpaper_params << "--pre-rotate" << "-90"
      end
    end

    system("unpaper", my_unpaper_params,
           "#{step}#{page}", "unpapered#{page}-%1d")
    step = "unpapered"

    case options[:layout]
    when "single"
      system("pnmtotiff", pnmtotiff_params, {
               :in => ["#{step}#{page}-1"],
               :out => ["tiff#{page}"]
             })
    when "double"
      system("pnmtotiff", pnmtotiff_params, {
               :in => ["#{step}#{page}-1"],
               :out => [sprintf("tiff%03d", (page.to_i-1)*2+1)]
             })
      system("pnmtotiff", pnmtotiff_params, {
               :in => ["#{step}#{page}-2"],
               :out => [sprintf("tiff%03d", (page.to_i-1)*2+2)]
             })
    when "double-folded"
      case page.to_i % 2
      when 1
        first =  (page.to_i-1)*4 + 4
        second = (page.to_i-1)*4 + 1
      when 0
        first =  (page.to_i-2)*4 + 2
        second = (page.to_i-2)*4 + 3
      end

      system("pnmtotiff", pnmtotiff_params, {
               :in => ["#{step}#{page}-1"],
               :out => [sprintf("tiff%03d", first)]
             })
      system("pnmtotiff", pnmtotiff_params, {
               :in => ["#{step}#{page}-2"],
               :out => [sprintf("tiff%03d", second)]
             })
    end
  end
end

Process.waitall

# double the number of pages after they have been passed through
# unpaper
options[:pages] = options[:pages]*2 if double_layout

options[:documents].times do |doc|
  Process.fork do
    at_exit { exit! }

    doc_pages = options[:pages]
    doc_pages -= 1 if options[:blank]

    doc_start = (options[:pages]*doc)+1
    doc_end = doc_start + doc_pages -1

    doc_pages = (doc_start..doc_end).collect { |x| "tiff%03d" % x }
    doctiff = "doc%03d" % (doc+1)

    docpdf = options[:output] % (doc+1)

    system("tiffcp", doc_pages, doctiff)
    system("tiff2pdf", tiff2pdf_params, "-o", docpdf, doctiff)
    $stdout.puts "scan2pdf: #{docpdf} created"
  end
end

Process.waitall
